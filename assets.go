// Code generated by go-bindata.
// sources:
// templates/default.nix
// templates/deps.nix
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\xc1\x8e\x9b\x4a\x10\xbc\xcf\x57\x94\xd8\xeb\x02\x7e\x96\xde\x1e\x6c\xf9\x12\x59\x9b\xe4\x92\xb5\x56\xce\x5e\x10\x87\x86\x69\x0f\x23\xc3\x80\x66\x1a\xe2\x64\xe5\x7f\x8f\x86\xe0\x8d\x73\x2b\x8a\xae\xae\xaa\xd6\x3c\xe0\xd8\xd8\x80\x93\x6d\x19\x3f\x28\xc0\xb0\x63\x4f\xc2\x1a\xd5\x4f\x34\x22\x43\xd8\xe4\xb9\xb1\xd2\x8c\x55\x56\xf7\x5d\x7e\xa6\xce\xb6\x75\xd3\xe5\xa6\x5f\x3b\x7b\xc1\x54\x14\xc8\xde\xd8\x07\xdb\x3b\x94\xa5\x7a\x47\x10\xcd\x6e\x7a\x44\x35\xda\x56\x7f\xee\x0f\x54\x9f\xc9\xf0\x23\x4e\x2c\x75\x63\xac\x2c\xa8\x31\x0b\xa8\x7e\xf9\x05\x85\xc9\xe1\xba\x51\xea\x5f\x25\x3c\xd7\x78\x57\xc0\xe0\xa8\x63\xec\x90\x44\xcb\xc3\xd9\x64\xdf\xe2\x77\x59\xa6\xa3\x0b\x42\x55\xcb\xc9\x56\x01\xd3\x92\xe5\x6e\xee\xfb\xa0\x49\x78\x4f\xc2\xd9\x73\xef\x3b\x12\x24\xeb\xd5\xea\x29\x5d\xfd\x97\xae\xd6\x09\xca\x72\x16\x7a\x9e\xee\x45\xaf\x3c\xd9\xa5\x54\xb2\x55\x0a\x28\x0a\xd8\x13\x1c\x23\xfb\x14\xf3\x1d\xc9\x04\x24\x51\xad\xf0\xa7\xeb\x73\x1b\xa9\x1d\x92\x34\x95\x88\xe2\xa6\xbf\xa3\x8b\x4b\x51\x80\x9d\x46\x3a\xcb\xcc\xad\xe3\x81\xa4\xb9\x37\xff\xda\x0d\xbd\x97\x99\xbd\xd9\x07\x5f\x63\xf7\x71\xc4\xf9\x20\x80\x75\x0d\x7b\x2b\x31\xfb\x76\x26\x46\xdf\xde\xef\x79\xab\xc3\x2b\x0f\xfd\xcd\x1c\x08\x0d\xad\xff\x7f\xba\x1f\xf9\x42\xa1\xb9\xfd\xbf\xce\x4e\xa6\xdf\xf3\x10\x8b\x64\xb9\xe6\x21\x64\xce\x5e\x66\xfe\x01\xc7\x97\xfd\xcb\x06\xa4\x35\x3a\x16\xd2\x24\xf4\xf1\x44\x9c\xbd\xf4\x21\xeb\xbd\x89\x68\x38\x9b\x90\x77\xe4\x46\x6a\xf3\x87\xc0\x75\x1a\x84\x9c\x26\xaf\xd3\xa8\x4b\x49\xc4\xdb\x6a\x14\x0e\x0a\xf3\x26\xec\xe6\x3e\xd7\xad\xba\xaa\xdf\x01\x00\x00\xff\xff\xe0\x4e\xd0\x2b\x91\x02\x00\x00")

func templatesDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultNix,
		"templates/default.nix",
	)
}

func templatesDefaultNix() (*asset, error) {
	bytes, err := templatesDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.nix", size: 657, mode: os.FileMode(420), modTime: time.Unix(1594280056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDepsNix = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x31\x4b\x43\x31\x14\x46\xf7\xf7\x2b\x3e\xea\x6c\x02\x05\x1d\x14\x37\xd1\xb5\x68\x75\x09\x19\x6e\xd3\xdb\x24\xf4\xbd\xe4\x91\xa4\xd5\x22\xfd\xef\xbe\xb4\xb4\x34\x43\x08\x9c\x73\xbe\xe1\xde\x61\xe9\x7c\xc6\xc6\xf7\x8c\x1f\xca\xb0\x1c\x38\x51\xe1\x35\x56\x07\xb8\x52\xc6\xfc\x24\xa5\xf5\xc5\xed\x56\xc2\xc4\x41\x6e\x69\xf0\xbd\x71\x83\xb4\x71\x1e\xfc\x2f\xf6\x4a\x41\x7c\x73\xca\x3e\x06\x68\xdd\xa9\x4e\xa9\x7b\x24\x0a\x96\x21\x5e\x79\xcc\x15\x02\x7f\xd3\x03\x6c\x5c\x90\xd9\x92\xe5\x05\x15\x87\x17\xcc\xea\xf8\xbd\x81\x5a\xcf\x9e\x4f\xed\x86\x8b\xa9\xcd\x79\x09\x94\xc3\xc8\x97\xc9\x5b\x75\x62\x59\xc9\xb5\x07\x76\xa9\x6f\x83\xaf\x09\xdc\xf8\xc4\xfb\xd6\x7f\x4c\xe0\xc6\x67\x47\xf3\x87\xc7\x36\xf9\x3c\xb3\x6b\x75\xac\xdf\xf1\x74\x23\x87\x75\xbd\x4d\x77\xff\x01\x00\x00\xff\xff\x39\x73\x16\x2a\x43\x01\x00\x00")

func templatesDepsNixBytes() ([]byte, error) {
	return bindataRead(
		_templatesDepsNix,
		"templates/deps.nix",
	)
}

func templatesDepsNix() (*asset, error) {
	bytes, err := templatesDepsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/deps.nix", size: 323, mode: os.FileMode(420), modTime: time.Unix(1481621393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.nix": templatesDefaultNix,
	"templates/deps.nix": templatesDepsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.nix": &bintree{templatesDefaultNix, map[string]*bintree{}},
		"deps.nix": &bintree{templatesDepsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

